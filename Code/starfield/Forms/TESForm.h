#pragma once

#include "TESFormRefCount.h"
#include "BSReflection.h"

struct TESForm : TESFormRefCount, BSReflection::IObject
{
    static TESForm* GetById(uint32_t aId);

    enum class FormType : uint8_t
    {
        NONE = 0x0,
        TES4 = 0x1,
        GRUP = 0x2,
        GMST = 0x3,
        KYWD = 0x4,
        FFKW = 0x5,
        LCRT = 0x6,
        AACT = 0x7,
        TRNS = 0x8,
        TXST = 0x9,
        GLOB = 0xa,
        DMGT = 0xb,
        CLAS = 0xc,
        FACT = 0xd,
        AFFE = 0xe,
        HDPT = 0xf,
        EYES = 0x10,
        RACE = 0x11,
        SOUN = 0x12,
        SECH = 0x13,
        ASPC = 0x14,
        AOPF = 0x15,
        SKIL = 0x16,
        MGEF = 0x17,
        SCPT = 0x18,
        LTEX = 0x19,
        PDCL = 0x1a,
        ENCH = 0x1b,
        SPEL = 0x1c,
        SCRL = 0x1d,
        ACTI = 0x1e,
        TACT = 0x1f,
        CURV = 0x20,
        CUR3 = 0x21,
        ARMO = 0x22,
        BOOK = 0x23,
        CONT = 0x24,
        DOOR = 0x25,
        INGR = 0x26,
        LIGH = 0x27,
        MISC = 0x28,
        STAT = 0x29,
        SCOL = 0x2a,
        PKIN = 0x2b,
        MSTT = 0x2c,
        GRAS = 0x2d,
        FLOR = 0x2e,
        FURN = 0x2f,
        WEAP = 0x30,
        AMMO = 0x31,
        NPC_ = 0x32,
        LVLN = 0x33,
        LVLP = 0x34,
        KEYM = 0x35,
        ALCH = 0x36,
        IDLM = 0x37,
        BMMO = 0x38,
        NOTE = 0x39,
        PROJ = 0x3a,
        HAZD = 0x3b,
        BNDS = 0x3c,
        SLGM = 0x3d,
        TERM = 0x3e,
        LVLI = 0x3f,
        GBFT = 0x40,
        GBFM = 0x41,
        LVLB = 0x42,
        WTHR = 0x43,
        WTHS = 0x44,
        CLMT = 0x45,
        SPGD = 0x46,
        REGN = 0x47,
        NAVI = 0x48,
        CELL = 0x49,
        REFR = 0x4a,
        ACHR = 0x4b,
        PMIS = 0x4c,
        PARW = 0x4d,
        PGRE = 0x4e,
        PBEA = 0x4f,
        PFLA = 0x50,
        PCON = 0x51,
        PPLA = 0x52,
        PBAR = 0x53,
        PEMI = 0x54,
        PHZD = 0x55,
        WRLD = 0x56,
        NAVM = 0x57,
        TLOD = 0x58,
        DIAL = 0x59,
        INFO = 0x5a,
        QUST = 0x5b,
        IDLE = 0x5c,
        PACK = 0x5d,
        CSTY = 0x5e,
        LSCR = 0x5f,
        LVSP = 0x60,
        ANIO = 0x61,
        WATR = 0x62,
        EFSH = 0x63,
        TOFT = 0x64,
        EXPL = 0x65,
        DEBR = 0x66,
        IMGS = 0x67,
        IMAD = 0x68,
        FLST = 0x69,
        PERK = 0x6a,
        BPTD = 0x6b,
        ADDN = 0x6c,
        AVIF = 0x6d,
        CAMS = 0x6e,
        CPTH = 0x6f,
        VTYP = 0x70,
        MATT = 0x71,
        IPCT = 0x72,
        IPDS = 0x73,
        ARMA = 0x74,
        LCTN = 0x75,
        MESG = 0x76,
        RGDL = 0x77,
        DOBJ = 0x78,
        DFOB = 0x79,
        LGTM = 0x7a,
        MUSC = 0x7b,
        FSTP = 0x7c,
        FSTS = 0x7d,
        SMBN = 0x7e,
        SMQN = 0x7f,
        SMEN = 0x80,
        DLBR = 0x81,
        MUST = 0x82,
        DLVW = 0x83,
        WOOP = 0x84,
        SHOU = 0x85,
        EQUP = 0x86,
        RELA = 0x87,
        SCEN = 0x88,
        ASTP = 0x89,
        OTFT = 0x8a,
        ARTO = 0x8b,
        MATO = 0x8c,
        MOVT = 0x8d,
        DUAL = 0x8e,
        COLL = 0x8f,
        CLFM = 0x90,
        REVB = 0x91,
        RFGP = 0x92,
        AMDL = 0x93,
        AAMD = 0x94,
        MAAM = 0x95,
        LAYR = 0x96,
        COBJ = 0x97,
        OMOD = 0x98,
        ZOOM = 0x99,
        INNR = 0x9a,
        KSSM = 0x9b,
        SCCO = 0x9c,
        AORU = 0x9d,
        STAG = 0x9e,
        IRES = 0x9f,
        BIOM = 0xa0,
        NOCM = 0xa1,
        LENS = 0xa2,
        LSPR = 0xa3,
        OVIS = 0xa4,
        DLYR = 0xa5,
        STND = 0xa6,
        STMP = 0xa7,
        GCVR = 0xa8,
        MRPH = 0xa9,
        TRAV = 0xaa,
        RSGD = 0xab,
        OSWP = 0xac,
        ATMO = 0xad,
        LVSC = 0xae,
        SPCH = 0xaf,
        RESO = 0xb0,
        AAPD = 0xb1,
        VOLI = 0xb2,
        SFBK = 0xb3,
        SFPC = 0xb4,
        SFPT = 0xb5,
        SFTR = 0xb6,
        PCMT = 0xb7,
        BMOD = 0xb8,
        STBH = 0xb9,
        PNDT = 0xba,
        IUTF = 0xbb,
        CNDF = 0xbc,
        PCBN = 0xbd,
        PCCN = 0xbe,
        STDT = 0xbf,
        WWED = 0xc0,
        RSPJ = 0xc1,
        AOPS = 0xc2,
        AMBS = 0xc3,
        WBAR = 0xc4,
        PTST = 0xc5,
        LMSW = 0xc6,
        FORC = 0xc7,
        TMLM = 0xc8,
        EFSQ = 0xc9,
        SDLT = 0xca,
        MTPT = 0xcb,
        CLDF = 0xcc,
        FOGV = 0xcd,
        WKMF = 0xce,
        LGDI = 0xcf,
        PSDC = 0xd0,
        SUNP = 0xd1,
        PMFT = 0xd2,
        TODD = 0xd3,
        AVMD = 0xd4,
        PERS = 0xd5,
        CHAL = 0xd6,
    };

    void SetSkipSaveFlag(bool aSet);

    virtual void sub_B();
    virtual void GetFullName();
    virtual void sub_D();
    virtual void sub_E();
    virtual void sub_F();
    virtual void sub_10();
    virtual void sub_11();
    virtual void sub_12();
    virtual void sub_13();
    virtual void sub_14();
    virtual void sub_15();
    virtual void sub_16();
    virtual void AddChange(uint32_t aChange);
    virtual void sub_18();
    virtual void sub_19();
    virtual void sub_1A();
    virtual void sub_1B();
    virtual void sub_1C();
    virtual void sub_1D();
    virtual void sub_1E();
    virtual void sub_1F();
    virtual void sub_20();
    virtual void sub_21();
    virtual void sub_22();
    virtual void sub_23();
    virtual void sub_24();
    virtual void sub_25();
    virtual void sub_26();
    virtual void sub_27();
    virtual void sub_28();
    virtual void sub_29();
    virtual void sub_2A();
    virtual void sub_2B();
    virtual void sub_2C();
    virtual void sub_2D();
    virtual void sub_2E();
    virtual void sub_2F();
    virtual void sub_30();
    virtual void sub_31();
    virtual void sub_32();
    virtual void sub_33();
    virtual void SetAltered(bool abAltered);
    virtual void sub_35();
    virtual void sub_36();
    virtual void sub_37();
    virtual void sub_38();
    virtual void sub_39();
    virtual void sub_3A();
    virtual void sub_3B();
    virtual void sub_3C();
    virtual bool IsBoundObject();
    virtual void sub_3E();
    virtual void sub_3F();
    virtual void sub_40();
    virtual void sub_41();
    virtual void sub_42();
    virtual void sub_43();
    virtual void sub_44();
    virtual void sub_45();
    virtual void sub_46();
    virtual void sub_47();
    virtual void sub_48();
    virtual void sub_49();
    virtual void sub_4A();
    virtual void sub_4B();
    virtual void sub_4C();
    virtual void sub_4D();
    virtual void sub_4E();
    virtual void sub_4F();
    virtual void sub_50();
    virtual void sub_51();
    virtual void sub_52();
    virtual void sub_53();
    virtual void sub_54();
    virtual void sub_55();
    virtual void sub_56();
    virtual void sub_57();
    virtual void sub_58();
    virtual void sub_59();
    virtual void sub_5A();
    virtual void sub_5B();
    virtual void sub_5C();
    virtual void sub_5D();
    virtual void sub_5E();
    virtual void sub_5F();
    virtual void sub_60();
    virtual void sub_61();

    uint8_t unk8[0x28-0x18];    // 0x18
    uint32_t formFlags;         // 0x28
    uint32_t unk2B;             // 0x2B
    uint32_t formID;            // 0x30
    uint16_t sInGameFormFlags;  // 0x34
    FormType cFormType;         // 0x36
};

static_assert(sizeof(TESForm) == 0x38);
